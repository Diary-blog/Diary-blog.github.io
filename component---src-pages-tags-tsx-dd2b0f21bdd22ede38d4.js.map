{"version":3,"sources":["webpack:///./src/pages/tags.tsx"],"names":["Tags","props","group","data","allMarkdownRemark","location","useLocation","useState","largeCount","setLargeCount","window","hash","split","targetTag","setTargetTag","posts","setPosts","sort","a","b","x","fieldValue","toLocaleLowerCase","y","map","g","fontSize","key","className","style","Math","round","totalCount","toString","length","opacity","fontWeight","color","onClick","href","useEffect","filter","edges","large","title","id"],"mappings":"wgCAwJeA,UA1IF,SAACC,GAAyB,IAE7BC,EADSD,EAATE,KACeC,kBAAfF,MAEFG,EAAWC,wBAJoB,EAODC,mBAAS,GAAtCC,EAP8B,KAOlBC,EAPkB,OAQHF,mBAA2B,oBAAXG,OAAyBA,OAAOL,SAASM,KAAKC,MAAM,KAAK,GAAK,IAAzGC,EAR8B,KAQnBC,EARmB,OASXP,mBAAS,IAA5BQ,EAT8B,KASvBC,EATuB,KAerCd,EAAMe,MAAK,SAACC,EAAcC,GACxB,IAAMC,EAAIF,EAAEG,WAAWC,oBACjBC,EAAIJ,EAAEE,WAAWC,oBAEvB,OAAIF,EAAIG,GAAW,EACfA,EAAIH,EAAU,EACX,KAIclB,EAAMsB,KAAI,SAACC,GAChC,IACMC,EAKN,OACE,sBAAIC,IAAKF,EAAEJ,YACT,wBACEO,UAAU,WACVC,MAAO,CACLH,SAA2B,cAAjBD,EAAEJ,YAVdK,EAAWI,KAAKC,MAAM,IAAMvB,EAAaiB,EAAEO,aAAaC,WACxDP,EAASQ,QAAU,IAAGR,EAAW,IAAIA,GACzC,KAAYA,EAAZ,OAQ+D,OACzDS,QAASV,EAAEJ,aAAeR,EAAY,MAAQ,MAC9CuB,WAAYX,EAAEJ,aAAeR,EAAY,OAAS,SAClDwB,MAAOZ,EAAEJ,aAAeR,EAAY,UAAY,WAElDyB,QAAS,WACPxB,EAAaW,EAAEJ,cAGjB,qBAAGkB,KAAI,IAAMd,EAAEJ,YAAeI,EAAEJ,iBAMhCJ,MAAK,SAACC,GACZ,MAAc,cAAVA,EAAES,KAA6B,EAC5B,KA+BT,OAnBAa,qBAAU,WACRxB,EARId,EAAMuC,QAAO,SAAChB,GAAD,OAAkBA,EAAEJ,aAAeR,KAAWqB,OACtDhC,EAAMuC,QAAO,SAAChB,GAAD,OAAkBA,EAAEJ,aAAeR,KAAW,GAAG6B,MAGhE,MAKN,CAAC7B,IAGJ2B,qBAAU,WAER,IADA,IACA,EADIG,EAAQ,EACZ,IAAgBzC,KAAhB,aAAuB,KAAZuB,EAAY,QACA,cAAjBA,EAAEJ,YAA8BI,EAAEO,WAAaW,IAAOA,EAAQlB,EAAEO,YAItE,OAFAvB,EAAckC,GAEP,eACN,CAACzC,IAEJsC,qBAAU,WACR1B,EAAaT,EAASM,KAAKC,MAAM,KAAK,MACtC,CAACP,EAASM,OAGV,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKiC,MAAM,SACX,uBAAKC,GAAG,QAKN,gBAAC,IAAD,CAAU9B,MAAOA","file":"component---src-pages-tags-tsx-dd2b0f21bdd22ede38d4.js","sourcesContent":["import * as React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport Layout from '../components/Layout';\r\nimport SEO from '../components/seo';\r\nimport './styles/tags.scss';\r\nimport PostList from '../components/PostList';\r\nimport { useLocation } from \"@reach/router\"\r\n\r\nexport interface TagsPageProps {\r\n  data: any;\r\n}\r\n\r\nconst Tags = (props: TagsPageProps) => {\r\n  const { data } = props;\r\n  const { group } = data.allMarkdownRemark;\r\n\r\n  const location = useLocation();\r\n  \r\n\r\n  const [largeCount, setLargeCount] = useState(0);\r\n  const [targetTag, setTargetTag] = useState(typeof window !== \"undefined\" ? window.location.hash.split('#')[1] : \"\");\r\n  const [posts, setPosts] = useState([])\r\n  interface groupItem {\r\n    fieldValue: string;\r\n    totalCount: number;\r\n  }\r\n\r\n  group.sort((a: groupItem, b: groupItem) => {\r\n    const x = a.fieldValue.toLocaleLowerCase();\r\n    const y = b.fieldValue.toLocaleLowerCase();\r\n\r\n    if (x < y) return -1;\r\n    if (y < x) return 1;\r\n    return 0;\r\n  });\r\n\r\n  // tag list\r\n  const tagList: any[] = group.map((g: groupItem) => {\r\n    const getFontSize = () => {\r\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString();\r\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`;\r\n      return `1.${fontSize}rem`;\r\n    };\r\n\r\n    return (\r\n      <li key={g.fieldValue}>\r\n        <span\r\n          className=\"tag-text\"\r\n          style={{\r\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '1rem',\r\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\r\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\r\n            color: g.fieldValue === targetTag ? '#f87325' : '#ffa46f',\r\n          }}\r\n          onClick={() => {\r\n            setTargetTag(g.fieldValue);\r\n          }}\r\n        >\r\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\r\n        </span>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  tagList.sort((a: React.ReactElement) => {\r\n    if (a.key === 'undefined') return -1;\r\n    return 0;\r\n  });\r\n\r\n  // post list \r\n  const getPostList: () => any[] = () => {\r\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\r\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0].edges;\r\n    }\r\n    \r\n    return [];\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPosts(getPostList() as any);\r\n  }, [targetTag])\r\n  \r\n  \r\n  useEffect(() => {\r\n    let large = 0;\r\n    for (const g of group) {\r\n      if (g.fieldValue !== 'undefined' && g.totalCount > large) large = g.totalCount;\r\n    }\r\n    setLargeCount(large);\r\n\r\n    return () => {};\r\n  }, [group]);\r\n\r\n  useEffect(() => {\r\n    setTargetTag(location.hash.split('#')[1]);\r\n  },[location.hash])\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Tags\" />\r\n      <div id=\"tags\">\r\n        {/* 태그 리스트 잠시 숨겨둠*/}\r\n        {/* <div className=\"tag-list-wrap\">\r\n          <ul>{tagList}</ul>\r\n        </div> */}\r\n        <PostList posts={posts} />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      group(field: frontmatter___tags) {\r\n        fieldValue\r\n        totalCount\r\n        edges {\r\n          node {\r\n            excerpt(format: PLAIN)\r\n            fields {\r\n              slug\r\n            }\r\n            frontmatter {\r\n              date(formatString: \"MMM DD, YYYY\")\r\n              update(formatString: \"MMM DD, YYYY\")\r\n              title\r\n              tags\r\n              cover {\r\n                childImageSharp {\r\n                  fixed(width: 150) {\r\n                    ...GatsbyImageSharpFixed\r\n                  }\r\n                  resolutions{\r\n                    width\r\n                    height\r\n                    src\r\n                    srcSet\r\n                  }\r\n                }\r\n              }\r\n              read\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Tags;\r\n"],"sourceRoot":""}