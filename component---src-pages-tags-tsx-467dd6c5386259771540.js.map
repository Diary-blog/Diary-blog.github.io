{"version":3,"sources":["webpack:///./src/pages/tags.tsx"],"names":["Tags","props","group","data","allMarkdownRemark","useState","largeCount","setLargeCount","window","location","hash","split","targetTag","setTargetTag","posts","setPosts","sort","a","b","x","fieldValue","toLocaleLowerCase","y","useEffect","map","g","fontSize","key","className","style","Math","round","totalCount","toString","length","opacity","fontWeight","color","onClick","href","filter","edges","large","title","id"],"mappings":"4/BA6JeA,UA9IF,SAACC,GAAyB,IAE7BC,EADSD,EAATE,KACeC,kBAAfF,MAF6B,EAIDG,mBAAS,GAAtCC,EAJ8B,KAIlBC,EAJkB,OAKHF,mBAA2B,oBAAXG,OAAyBA,OAAOC,SAASC,KAAKC,MAAM,KAAK,GAAK,IAAzGC,EAL8B,KAKnBC,EALmB,OAMXR,mBAAS,IAA5BS,EAN8B,KAMvBC,EANuB,KAYrCb,EAAMc,MAAK,SAACC,EAAcC,GACxB,IAAMC,EAAIF,EAAEG,WAAWC,oBACjBC,EAAIJ,EAAEE,WAAWC,oBAEvB,OAAIF,EAAIG,GAAW,EACfA,EAAIH,EAAU,EACX,KAGTI,qBAAU,WACRV,EAAaL,OAAOC,SAASC,KAAKC,MAAM,KAAK,MAC7C,IAGqBT,EAAMsB,KAAI,SAACC,GAChC,IACMC,EAKN,OACE,sBAAIC,IAAKF,EAAEL,YACT,wBACEQ,UAAU,WACVC,MAAO,CACLH,SAA2B,cAAjBD,EAAEL,YAVdM,EAAWI,KAAKC,MAAM,IAAMzB,EAAamB,EAAEO,aAAaC,WACxDP,EAASQ,QAAU,IAAGR,EAAW,IAAIA,GACzC,KAAYA,EAAZ,OAQ+D,OACzDS,QAASV,EAAEL,aAAeR,EAAY,MAAQ,MAC9CwB,WAAYX,EAAEL,aAAeR,EAAY,OAAS,SAClDyB,MAAOZ,EAAEL,aAAeR,EAAY,UAAY,WAElD0B,QAAS,WACPzB,EAAaY,EAAEL,cAGjB,qBAAGmB,KAAI,IAAMd,EAAEL,YAAeK,EAAEL,iBAMhCJ,MAAK,SAACC,GACZ,MAAc,cAAVA,EAAEU,KAA6B,EAC5B,KAkCT,OApBAJ,qBAAU,WACRR,EARIb,EAAMsC,QAAO,SAACf,GAAD,OAAkBA,EAAEL,aAAeR,KAAWsB,OACtDhC,EAAMsC,QAAO,SAACf,GAAD,OAAkBA,EAAEL,aAAeR,KAAW,GAAG6B,MAGhE,MAKN,CAAC7B,IAGJW,qBAAU,WAER,IADA,IACA,EADImB,EAAQ,EACZ,IAAgBxC,KAAhB,aAAuB,KAAZuB,EAAY,QACA,cAAjBA,EAAEL,YAA8BK,EAAEO,WAAaU,IAAOA,EAAQjB,EAAEO,YAItE,OAFAzB,EAAcmC,GAEP,eACN,CAACxC,IAEJqB,qBAAU,WAER,OADId,SAASC,MAAMG,EAAaJ,SAASC,KAAKC,MAAM,KAAK,IAClD,eACN,IAGD,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKgC,MAAM,SACX,uBAAKC,GAAG,QAKN,gBAAC,IAAD,CAAU9B,MAAOA","file":"component---src-pages-tags-tsx-467dd6c5386259771540.js","sourcesContent":["import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport './styles/tags.scss';\nimport PostList from '../components/PostList';\n\nexport interface TagsPageProps {\n  data: any;\n}\n\n\n\nconst Tags = (props: TagsPageProps) => {\n  const { data } = props;\n  const { group } = data.allMarkdownRemark;\n\n  const [largeCount, setLargeCount] = useState(0);\n  const [targetTag, setTargetTag] = useState(typeof window !== \"undefined\" ? window.location.hash.split('#')[1] : \"\");\n  const [posts, setPosts] = useState([])\n  interface groupItem {\n    fieldValue: string;\n    totalCount: number;\n  }\n\n  group.sort((a: groupItem, b: groupItem) => {\n    const x = a.fieldValue.toLocaleLowerCase();\n    const y = b.fieldValue.toLocaleLowerCase();\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  });\n\n  useEffect(() => {\n    setTargetTag(window.location.hash.split('#')[1]);\n  },[])\n\n  // tag list\n  const tagList: any[] = group.map((g: groupItem) => {\n    const getFontSize = () => {\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString();\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`;\n      return `1.${fontSize}rem`;\n    };\n\n    return (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '1rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n            color: g.fieldValue === targetTag ? '#f87325' : '#ffa46f',\n          }}\n          onClick={() => {\n            setTargetTag(g.fieldValue);\n          }}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    );\n  });\n\n  tagList.sort((a: React.ReactElement) => {\n    if (a.key === 'undefined') return -1;\n    return 0;\n  });\n\n\n  \n  // post list \n  const getPostList: () => any[] = () => {\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0].edges;\n    }\n    \n    return [];\n  };\n\n  useEffect(() => {\n    setPosts(getPostList() as any)\n  }, [targetTag])\n  \n  \n  useEffect(() => {\n    let large = 0;\n    for (const g of group) {\n      if (g.fieldValue !== 'undefined' && g.totalCount > large) large = g.totalCount;\n    }\n    setLargeCount(large);\n\n    return () => {};\n  }, [group]);\n\n  useEffect(() => {\n    if (location.hash) setTargetTag(location.hash.split('#')[1]);\n    return () => {};\n  }, []);\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" />\n      <div id=\"tags\">\n        {/* 태그 리스트 잠시 숨겨둠*/}\n        {/* <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div> */}\n        <PostList posts={posts} />\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            excerpt(format: PLAIN)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"MMM DD, YYYY\")\n              update(formatString: \"MMM DD, YYYY\")\n              title\n              tags\n              cover {\n                childImageSharp {\n                  fixed(width: 150) {\n                    ...GatsbyImageSharpFixed\n                  }\n                  resolutions{\n                    width\n                    height\n                    src\n                    srcSet\n                  }\n                }\n              }\n              read\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}